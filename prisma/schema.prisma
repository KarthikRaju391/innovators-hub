// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// create model for project report details

model User {
  id            String        @id @default(cuid())
  bio           String?
  name          String
  gender        String?
  email         String        @unique
  phoneNumber   String?       @unique
  phoneVerified Boolean?      @default(false)
  emailVerified Boolean?      @default(false)
  password      String?       @db.Text
  address       String?
  image         String?
  panNumber     String?
  role          userRole[]    @default([USER])
  panVerified   Boolean?      @default(false)
  entrepreneur  Entrepreneur?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
  cart          Cart[]
  comments      Comment[]
  post          Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum userRole {
  USER
  INVESTOR
  ENTREPRENEUR
  ADMIN
}

model Entrepreneur {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  startup   Startup  @relation(fields: [startupId], references: [id])
  website   String?
  social    String[]
  startupId String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String    @id @default(cuid())
  title      String
  body       String
  permalink  String    @unique
  startupId  String?
  campaignId String?
  userId     String
  image      String?
  comment    Comment[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Startup   Startup? @relation(fields: [startupId], references: [id])

  @@unique([startupId, campaignId])
}

model Comment {
  id     String @id @default(cuid())
  body   String
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  children Comment[] @relation("Comment_children")
  parent   Comment?  @relation("Comment_children", fields: [parentId], references: [id])
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  startup     Startup?   @relation(fields: [startupId], references: [id])
  startupId   String?
  price       Int
  image       String[]
  cart        Cart[]
  category    Category[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartQuantity CartQuantity[]
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Startup {
  id           String         @id @default(cuid())
  name         String
  description  String?
  images       String[]
  products     Product[]
  panNumber    String         @unique
  gstNumber    String
  post         Post[]
  industry     String[]
  stage        String?
  location     String
  website      String?
  email        String?
  social       String[]
  project      Project[]
  entrepreneur Entrepreneur[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investor {
  id               String       @id @default(cuid())
  type             InvestorType
  email            String
  name             String
  organizationName String?
  website          String?
  social           String[]
  venture          Venture[]
}

enum InvestorType {
  INDIVIDUAL
  ORGANIZATION
}

enum InvestmentStage {
  SEED
  ANGEL
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D
  LATE_STAGE
  IPO
  ACQUISITION
}

model Venture {
  id              String          @id @default(cuid())
  investor        Investor        @relation(fields: [investorId], references: [id])
  investorId      String          @unique
  amountInvested  Float
  investmentStage InvestmentStage
  project         Project         @relation(fields: [projectId], references: [id])
  projectId       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String
  startup       Startup?  @relation(fields: [startupId], references: [id])
  startupId     String?   @unique
  projectReport Json?
  venture       Venture[]
  image         String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// model ProjectReport {
//   id        String   @id @default(cuid())
//   project   Project?
//   report    Json
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Order {
  id             String           @id @default(cuid())
  userId         String
  quantity       Int
  deliverTo      String
  deliveryStatus Status           @default(PENDING)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction    Transaction?
  orderCost      Int
  products       ProductOnOrder[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ProductOnOrder {
  id           String @id @default(cuid())
  orderId      String
  order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  productName  String
  productPrice Int
}

model Transaction {
  id                    String  @id @default(cuid())
  razorpayOrderId       String
  razorpayPaymentId     String?
  razorpaySignature     String?
  razorpayPaymentLink   String?
  razorpayPaymentStatus String?
  razorpayPaymentAmount Int?
  order                 Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               String? @unique
}

model Cart {
  id         String         @id @default(cuid())
  userId     String         @unique
  quantities CartQuantity[]
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[]
  totalCost  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartQuantity {
  id        String  @id @default(cuid())
  cartId    String  @unique
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId])
}

model PostalService {
  id         String     @id @default(cuid())
  accessType accessType @default(EDIT)
  email      String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum accessType {
  EDIT
  VIEW
}

enum Status {
  PENDING
  READY
  COLLECTED
  DELIVERED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
