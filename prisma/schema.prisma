// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  bio           String?
  name          String
  email         String    @unique
  emailVerified String?
  password      String?   @db.Text
  image         String?
  panNumber     String?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
  backers       Backers[]
  cart          Cart[]
  comments      Comment[]
  post          Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String    @id @default(uuid())
  title      String
  body       String
  permalink  String    @unique
  startupId  String?
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  userId     String
  image      String?
  comment    Comment[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Startup   Startup? @relation(fields: [startupId], references: [id])

  @@unique([startupId, campaignId])
}

model Comment {
  id     String @id @default(uuid())
  body   String
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  children Comment[] @relation("Comment_children")
  parent   Comment?  @relation("Comment_children", fields: [parentId], references: [id])
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String    @id @default(uuid())
  title       String
  content     String
  startupId   String?
  fundingGoal Int?
  backers     Backers[]
  reward      String[]
  image       String
  post        Post[]
  Reward      Reward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id         String   @id @default(uuid())
  campaignId String
  title      String
  content    String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// many to many relation for campaign and backers
model Backers {
  id         String     @id @default(uuid())
  campaignId String
  userId     String
  amount     Int
  campaign   Campaign[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  startupId   String
  price       Int
  image       String[]
  startup     Startup    @relation(fields: [startupId], references: [id])
  order       Order[]
  cart        Cart[]
  category    Category[]
  categoryId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String    @id @default(uuid())
  name    String
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Startup {
  id          String    @id @default(uuid())
  name        String
  description String
  image       String
  products    Product[]
  panNumber   String
  post        Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String           @id @default(uuid())
  userId            String
  quantity          Int
  deliverTo         String
  deliveryDate      DateTime
  deliveryStatus    Status           @default(PENDING)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products          Product[]
  deliveryPartner   DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id])
  deliveryPartnerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id       String    @id @default(uuid())
  userId   String
  quantity Int
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryPartner {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String   @db.Text
  phoneNumber String
  image       String
  order       Order[]
  manager     Manager? @relation(fields: [managerId], references: [id])
  managerId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String            @db.Text
  phoneNumber     String
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deliveryPartner DeliveryPartner[]
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
