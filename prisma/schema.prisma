generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  bio           String?
  name          String
  gender        String?
  email         String        @unique
  phoneNumber   String?       @unique
  phoneVerified Boolean?      @default(false)
  emailVerified Boolean?      @default(false)
  address       String?
  image         String?
  role          userRole[]    @default([USER])
  accounts      Account[]
  cart          Cart?
  social        String[]
  comments      Comment[]
  entrepreneur  Entrepreneur?
  investor      Investor?
  order         Order[]
  post          Post[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Entrepreneur {
  id        String    @id @default(cuid())
  userId    String    @unique
  website   String?
  startupId String    @unique
  startup   Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  meeting   Meeting[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Investor {
  id               String    @id @default(cuid())
  type             String
  email            String
  organizationName String?
  website          String?
  panNumber        String?
  panVerified      Boolean?  @default(false)
  venture          Venture?
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  meeting          Meeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String    @id @default(cuid())
  title      String
  body       String
  permalink  String    @unique
  startupId  String?
  campaignId String?
  userId     String
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comment    Comment[]
  Startup    Startup?  @relation(fields: [startupId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([startupId, campaignId])
}

model Comment {
  id        String    @id @default(cuid())
  body      String
  postId    String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("Comment_children", fields: [parentId], references: [id])
  children  Comment[] @relation("Comment_children")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String
  startupId    String?
  price        Int
  image        String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  CartQuantity CartQuantity?
  startup      Startup?      @relation(fields: [startupId], references: [id])
  cart         Cart[]        @relation("CartToProduct")
  category     Category[]    @relation("CategoryToProduct")
  orderId      String?
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("CategoryToProduct")
}

model Startup {
  id             String           @id @default(cuid())
  name           String
  description    String?
  images         String[]
  products       Product[]
  panNumber      String           @unique
  gstNumber      String
  post           Post[]
  location       String
  website        String?
  email          String?
  social         String[]
  project        Project[]
  entrepreneur   Entrepreneur?
  productOnOrder ProductOnOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venture {
  id              String          @id @default(cuid())
  investorId      String          @unique
  amountInvested  Float
  investmentStage InvestmentStage
  projectId       String
  investor        Investor        @relation(fields: [investorId], references: [id])
  project         Project         @relation(fields: [projectId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String
  startupId     String?
  image         String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projectReport Json?
  startup       Startup?  @relation(fields: [startupId], references: [id])
  venture       Venture[]
}

model Order {
  id             String           @id @default(cuid())
  userId         String
  quantity       Int
  deliverTo      String
  orderCost      Int
  startupIds     String[]
  deliveryStatus Status           @default(PENDING)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       ProductOnOrder[]
  transaction    Transaction?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String         @id @default(cuid())
  userId     String         @unique
  totalCost  Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantities CartQuantity[]
  products   Product[]      @relation("CartToProduct")
}

model CartQuantity {
  id        String   @id @default(cuid())
  cartId    String
  productId String   @unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model PostalService {
  id         String     @id @default(cuid())
  accessType accessType @default(EDIT)
  email      String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String   @id @default(cuid())
  deviceId  String
  latitude  Float
  longitude Float
  speed     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductOnOrder {
  id              String  @id @default(cuid())
  orderId         String  @unique
  productId       String
  productName     String
  productQuantity Int
  productPrice    Int
  startupId       String
  readyToShip     Boolean @default(false)
  order           Order   @relation(fields: [orderId], references: [id])
  startup         Startup @relation(fields: [startupId], references: [id])
}

model Transaction {
  id                    String  @id @default(cuid())
  razorpayOrderId       String
  razorpayPaymentId     String?
  razorpaySignature     String?
  razorpayPaymentLink   String?
  razorpayPaymentStatus String?
  razorpayPaymentAmount Int?
  orderId               String? @unique
  order                 Order?  @relation(fields: [orderId], references: [id])
}

model AccessToken {
  id           String    @id @default(cuid())
  token        String    @unique
  refreshToken String
  expiresIn    Int
  createdAt    DateTime  @default(now())
  meetings     Meeting[]
}

model Meeting {
  id             String       @id @default(cuid())
  entrepreneur   Entrepreneur @relation(fields: [entrepreneurId], references: [id])
  entrepreneurId String
  investor       Investor     @relation(fields: [investorId], references: [id])
  investorId     String
  topic          String
  startTime      DateTime
  duration       Int
  accessToken    AccessToken? @relation(fields: [accessTokenId], references: [id])
  accessTokenId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum userRole {
  USER
  INVESTOR
  ENTREPRENEUR
  ADMIN
}

enum InvestmentStage {
  SEED
  ANGEL
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D
  LATE_STAGE
  IPO
  ACQUISITION
}

enum accessType {
  EDIT
  VIEW
}

enum Status {
  PENDING
  READY
  COLLECTED
  DELIVERED
}
